{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The Navigation framework mainly handles screen transitions, including alert dialog and launch other application."},{"type":"text","text":" "},{"type":"text","text":"This framework takes FlowController as its basic concept and provides practical practices of FlowController."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This framework core is FlowController protocol. Each Flows conform to this protocol."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The three flows which is used mainly are ApplicationFlow, TabFlow, and AnyFlow."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"ApplicationFlow handles transitions for the entire application."},{"type":"text","text":" "},{"type":"text","text":"Transitions from push notifications and deepLink such as universal links is handled."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"TabFlow handle UITabBarController transition."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"AnyFlow handle mainly UINavigationController transition."},{"type":"text","text":" "},{"type":"text","text":"A FlowChild must be defined for each AnyFlow."},{"type":"text","text":" "},{"type":"text","text":"Each FlowChild corresponds to a screen, and each screen must belongs to one of the Flows."}]},{"type":"tabNavigator","tabs":[{"title":"ApplicationFlow","content":[{"type":"codeListing","syntax":"swift","code":["final class AppFlow: ApplicationFlow {","    private let mainFlow = MainFlow()","","    private let loginFlow = LoginFlow(","        navigation: .init(),","        root: .login,","        from: AppFlow.self","    )","","    init() {","        super.init(flows: [self.mainFlow, self.loginFlow])","    }","","    required init(","        navigation: Never,","        root: ApplicationFlow.Child,","        from: any FlowController.Type,","        present: Bool,","        alertMessageAlignment: NSTextAlignment?,","        alertTintColor: UIColor?","    ) {","        fatalError(\"has not been implemented\")","    }","","    override func viewDidLoad() {","        super.viewDidLoad()","        self.start()","    }","","    override func start() {","        super.start()","        add(self.loginFlow)","    }","}"]}]},{"title":"TabFlow","content":[{"type":"codeListing","syntax":"swift","code":["final class MainFlow: TabFlow {","    private let basicFlow = BasicFlow(","        navigation: .init(),","        root: .first,","        from: MainFlow.self","    )","","    private let sampleFlow = SampleFlow(","        navigation: .init(),","        root: .collection,","        from: MainFlow.self","    )","","    init() {","        let flows: [any FlowController] = [self.baseFlow, self.sampleFlow]","","        super.init(","            navigation: UITabBarController(),","            from: AppFlow.self,","            alertMessageAlignment: nil,","            alertTintColor: nil,","            flows: flows","        )","    }","","    required init(","        navigation: TabBarController,","        root: TabFlow.Child,","        from: any FlowController.Type,","        present: Bool,","        alertMessageAlignment: NSTextAlignment?,","        alertTintColor: UIColor?","    ) {","        fatalError(\"has not been implemented\")","    }","}",""]}]},{"title":"AnyFlow","content":[{"type":"codeListing","syntax":"swift","code":["enum LoginFlowChild {","    case login","}","","final class LoginFlow: AnyFlow<BaseFlow<LoginFlowChild>> {","    override var childProvider: (LoginFlowChild) -> UIViewController {{ [weak self] child in","        guard let self else { return .init(nibName: nil, bundle: nil) }","","        switch child {","        case .login:","            let vc = LoginViewController()","            vc.inject(viewModel: .init(), ui: .init())","            return vc","        }","    }}","}"]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"AppDelegate has ApplicationFlow like below."}]},{"type":"codeListing","syntax":"swift","code":["@main","class AppDelegate: UIResponder, UIApplicationDelegate {","    var window: UIWindow?","","    private let appFlowController: AppFlow = .init()","","    func application(","        _ application: UIApplication,","        didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?","    ) -> Bool {","        self.window = UIWindow(frame: UIScreen.main.bounds)","        self.window?.rootViewController = self.appFlowController","        self.window?.makeKeyAndVisible()","","        return true","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are two types of screen transitions using Flow, "},{"type":"codeVoice","code":"start"},{"type":"text","text":" and "},{"type":"codeVoice","code":"show"},{"type":"text","text":"."}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"start"},{"type":"text","text":" is used to create another Flow from a Flow."}]}]}]},{"type":"codeListing","syntax":"swift","code":["self.start(","    flowType: CartFlow.self,","    root: .list,","    delegate: self,","    showType: .modal(navigation: .init(showCloseButton: true))",")"]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"show"},{"type":"text","text":" is used for transitions between FlowChilds in a Flow."}]}]}]},{"type":"codeListing","syntax":"swift","code":["self.show(.productDetail(productId: productId))"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Flow receives events from FlowChild and processes transitions."},{"type":"text","text":" "},{"type":"text","text":"The main use is Delegate."}]},{"type":"codeListing","syntax":"swift","code":["protocol LoginViewControllerDelegate: AnyObject {","    func didNextButtonTapped()","}","","final class LoginFlow: AnyFlow<BaseFlow<LoginFlowChild>> {","    override var childProvider: (LoginFlowChild) -> UIViewController {{ [weak self] child in","        guard let self else { return .init(nibName: nil, bundle: nil) }","","        switch child {","        case .login:","            let vc = LoginViewController()","            vc.inject(viewModel: .init(), ui: .init())","            vc.delegate = self","            return vc","        }","    }}","}","","extension LoginFlow: LoginViewControllerDelegate {","    func didNextButtonTapped() {","        self.show(.first)","    }","}"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/navigation\/gettingstarted"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Navigation\/documentation\/Navigation\/GettingStarted","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Screen transitions using Navigation framework"}],"kind":"article","metadata":{"modules":[{"name":"Navigation"}],"role":"collectionGroup","title":"Getting started with Navigation framework"},"hierarchy":{"paths":[["doc:\/\/Navigation\/documentation\/Navigation"]]},"topicSections":[{"identifiers":["doc:\/\/Navigation\/tutorials\/Navigation\/Tutorial"]}],"references":{"doc://Navigation/tutorials/Navigation/Tutorial":{"role":"project","title":"Tutorial","estimatedTime":"20min","abstract":[{"type":"text","text":"using Navigation framework"}],"identifier":"doc:\/\/Navigation\/tutorials\/Navigation\/Tutorial","kind":"project","type":"topic","url":"\/tutorials\/navigation\/tutorial"},"doc://Navigation/documentation/Navigation":{"role":"collection","title":"Navigation","abstract":[{"type":"text","text":"Mobile architecture framework inspired by FlowController."}],"identifier":"doc:\/\/Navigation\/documentation\/Navigation","kind":"symbol","type":"topic","url":"\/documentation\/navigation"}}}